#+title: siahe
#+html: <img style="height: 35em;"src="https://i.imgur.com/mXwY95v.jpeg"/>

=siahe= is designed to help university clubs sell tickets for their events through the Telegram messaging platform. The bot provides a seamless ticket purchasing experience for users, allowing them to easily browse available events, select tickets, and sign up directly within the Telegram app.

** Build
1. Have the latest version of =go= installed in you path.
2. Clone this repository and change directory.
3. Build.
#+begin_src bash
go build .
#+end_src

** Run
=siahe= inputs a set of configuration entries. This entries can either be passed by environment variables, argument flags or =.env= file. To see the full list of flags either do =siahe --help= or check out [file:config.go] directly.

Here is an example usage of an =.env= file.
Generate the env file.
#+begin_src bash
cp .env.sample .env
#+end_src
Fill out the env file with specified parameters.
#+begin_src bash
$EDITOR .env
#+end_src
Run the program.
#+begin_src bash
siahe
#+end_src

*** Run by Docker
=siahe= [[https://github.com/TopSelectOrg/toucanet/pkgs/container/toucanet][images]] are built upon each commit on Github container registry (ghcr) with =latest= tag.

Authorize to GHCR by [[https://github.com/settings/tokens][making a PAT]] that has =read:packages= permission. ([[https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry#authenticating-with-a-personal-access-token-classic][info]])

Make siahe assets directory and grant nonroot permission to it.
#+begin_src bash
mkdir siahe_assets
sudo chown 65532 siahe_assets
sudo chmod a+w siahe_assets
#+end_src

Generate the following =docker-compose.yml= file.
#+begin_src yaml
version: '3'
services:
    siahe:
    image: ghcr.io/dearrude/siahe:latest
    container_name: siahe
    volumes:
        - ./siahe_assets:/home/nonroot/assets
    environment:
        APPID: -
        APPHASH: -
        BOTTOKEN: -
        ADMINPASSWORD: -
        VARIFICATIONCHAT: -
        BACKUPCHAT: -
        SQLITEPATH: "/home/nonroot/assets/db.sqlite"
        SESSIONPATH: "/home/nonroot/assets/session.json"

#+end_src

Run the containers.
#+begin_src bash
docker compose up -d && docker compose logs -f
#+end_src

In case of updates, run the following the command to update and re-run the container:
#+begin_src bash
docker compose pull
docker compose up -d --force-recreate
docker compose logs -f
#+end_src


** Licence
AGPLv3+
